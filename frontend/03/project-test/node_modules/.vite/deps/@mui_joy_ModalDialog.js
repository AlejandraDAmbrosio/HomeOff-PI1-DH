"use client";
import {
  resolveSxValue
} from "./chunk-5HMVGTKT.js";
import "./chunk-E5KLU3IB.js";
import {
  ColorInversionProvider,
  styled_default,
  useColorInversion,
  useSlot,
  useThemeProps
} from "./chunk-SKPJIKYJ.js";
import {
  generateUtilityClass,
  generateUtilityClasses
} from "./chunk-3QMA2GTM.js";
import "./chunk-REE5TRU3.js";
import "./chunk-2G3LUIED.js";
import "./chunk-O7UGIUND.js";
import "./chunk-WYQLYBSV.js";
import "./chunk-BMYLRGIF.js";
import "./chunk-KIIUAHND.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  capitalize,
  clsx_default,
  composeClasses,
  getPath,
  init_clsx,
  init_esm,
  init_esm2,
  init_extends,
  init_objectWithoutPropertiesLoose,
  isMuiElement,
  require_jsx_runtime,
  require_prop_types
} from "./chunk-4QFUNHGG.js";
import "./chunk-GSZ7ISAW.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// ../../../../../../../../node_modules/@mui/joy/ModalDialog/ModalDialog.js
init_objectWithoutPropertiesLoose();
init_extends();
var React4 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
init_clsx();
init_esm();

// ../../../../../../../../node_modules/@mui/joy/Sheet/Sheet.js
init_objectWithoutPropertiesLoose();
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx();
init_esm();
init_esm2();

// ../../../../../../../../node_modules/@mui/joy/Sheet/sheetClasses.js
function getSheetUtilityClass(slot) {
  return generateUtilityClass("MuiSheet", slot);
}
var sheetClasses = generateUtilityClasses("MuiSheet", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid"]);

// ../../../../../../../../node_modules/@mui/joy/Sheet/Sheet.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var _excluded = ["className", "color", "component", "variant", "invertedColors", "slots", "slotProps"];
var useUtilityClasses = (ownerState) => {
  const {
    variant,
    color
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`]
  };
  return composeClasses(slots, getSheetUtilityClass, {});
};
var SheetRoot = styled_default("div", {
  name: "JoySheet",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$colorInversion;
  const variantStyle = (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color];
  const {
    borderRadius: childRadius,
    bgcolor,
    backgroundColor,
    background
  } = resolveSxValue({
    theme,
    ownerState
  }, ["borderRadius", "bgcolor", "backgroundColor", "background"]);
  const resolvedBg = getPath(theme, `palette.${bgcolor}`) || bgcolor || getPath(theme, `palette.${backgroundColor}`) || backgroundColor || background || (variantStyle == null ? void 0 : variantStyle.backgroundColor) || (variantStyle == null ? void 0 : variantStyle.background) || theme.vars.palette.background.surface;
  return [_extends({
    "--Icon-color": ownerState.color !== "neutral" || ownerState.variant === "solid" ? "currentColor" : theme.vars.palette.text.icon,
    "--ListItem-stickyBackground": resolvedBg === "transparent" ? "initial" : resolvedBg,
    // for sticky List
    "--Sheet-background": resolvedBg === "transparent" ? "initial" : resolvedBg
  }, childRadius !== void 0 && {
    "--List-radius": `calc(${childRadius} - var(--variant-borderWidth, 0px))`,
    "--unstable_actionRadius": `calc(${childRadius} - var(--variant-borderWidth, 0px))`
  }, {
    backgroundColor: theme.vars.palette.background.surface,
    position: "relative"
  }), _extends({}, theme.typography["body-md"], variantStyle), ownerState.color !== "context" && ownerState.invertedColors && ((_theme$colorInversion = theme.colorInversion[ownerState.variant]) == null ? void 0 : _theme$colorInversion[ownerState.color])];
});
var Sheet = React.forwardRef(function Sheet2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoySheet"
  });
  const {
    className,
    color: colorProp = "neutral",
    component = "div",
    variant = "plain",
    invertedColors = false,
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    color,
    component,
    invertedColors,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: SheetRoot,
    externalForwardedProps,
    ownerState
  });
  const result = (0, import_jsx_runtime.jsx)(SlotRoot, _extends({}, rootProps));
  if (invertedColors) {
    return (0, import_jsx_runtime.jsx)(ColorInversionProvider, {
      variant,
      children: result
    });
  }
  return result;
});
true ? Sheet.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types.default.node,
  /**
   * @ignore
   */
  className: import_prop_types.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types.default.elementType,
  /**
   * If `true`, the children with an implicit color prop invert their colors to match the component's variant and color.
   * @default false
   */
  invertedColors: import_prop_types.default.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types.default.shape({
    root: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types.default.shape({
    root: import_prop_types.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'plain'
   */
  variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types.default.string])
} : void 0;

// ../../../../../../../../node_modules/@mui/joy/ModalDialog/modalDialogClasses.js
function getModalDialogUtilityClass(slot) {
  return generateUtilityClass("MuiModalDialog", slot);
}
var modalDialogClasses = generateUtilityClasses("MuiModalDialog", ["root", "colorPrimary", "colorNeutral", "colorDanger", "colorSuccess", "colorWarning", "colorContext", "variantPlain", "variantOutlined", "variantSoft", "variantSolid", "sizeSm", "sizeMd", "sizeLg", "layoutCenter", "layoutFullscreen"]);
var modalDialogClasses_default = modalDialogClasses;

// ../../../../../../../../node_modules/@mui/joy/ModalDialog/ModalDialogSizeContext.js
var React2 = __toESM(require_react());
var ModalDialogSizeContext = React2.createContext(void 0);
var ModalDialogSizeContext_default = ModalDialogSizeContext;

// ../../../../../../../../node_modules/@mui/joy/ModalDialog/ModalDialogVariantColorContext.js
var React3 = __toESM(require_react());
var ModalDialogVariantColorContext = React3.createContext(void 0);
var ModalDialogVariantColorContext_default = ModalDialogVariantColorContext;

// ../../../../../../../../node_modules/@mui/joy/ModalDialog/ModalDialog.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var _excluded2 = ["className", "children", "color", "component", "variant", "size", "layout", "slots", "slotProps"];
var useUtilityClasses2 = (ownerState) => {
  const {
    variant,
    color,
    size,
    layout
  } = ownerState;
  const slots = {
    root: ["root", variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`, layout && `layout${capitalize(layout)}`]
  };
  return composeClasses(slots, getModalDialogUtilityClass, {});
};
var ModalDialogRoot = styled_default(SheetRoot, {
  name: "JoyModalDialog",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  // Divider integration
  "--Divider-inset": "calc(-1 * var(--ModalDialog-padding))",
  "--ModalClose-radius": "max((var(--ModalDialog-radius) - var(--variant-borderWidth, 0px)) - var(--ModalClose-inset), min(var(--ModalClose-inset) / 2, (var(--ModalDialog-radius) - var(--variant-borderWidth, 0px)) / 2))"
}, ownerState.size === "sm" && {
  "--ModalDialog-padding": theme.spacing(2),
  "--ModalDialog-radius": theme.vars.radius.sm,
  "--ModalDialog-gap": theme.spacing(0.75),
  "--ModalDialog-titleOffset": theme.spacing(0.25),
  "--ModalDialog-descriptionOffset": theme.spacing(0.25),
  "--ModalClose-inset": theme.spacing(1.25)
}, ownerState.size === "md" && {
  "--ModalDialog-padding": theme.spacing(2.5),
  "--ModalDialog-radius": theme.vars.radius.md,
  "--ModalDialog-gap": theme.spacing(1.5),
  "--ModalDialog-titleOffset": theme.spacing(0.25),
  "--ModalDialog-descriptionOffset": theme.spacing(0.75),
  "--ModalClose-inset": theme.spacing(1.5)
}, ownerState.size === "lg" && {
  "--ModalDialog-padding": theme.spacing(3),
  "--ModalDialog-radius": theme.vars.radius.md,
  "--ModalDialog-gap": theme.spacing(2),
  "--ModalDialog-titleOffset": theme.spacing(0.5),
  "--ModalDialog-descriptionOffset": theme.spacing(1),
  "--ModalClose-inset": theme.spacing(1.5)
}, {
  boxSizing: "border-box",
  boxShadow: theme.shadow.md,
  borderRadius: "var(--ModalDialog-radius)",
  fontFamily: theme.vars.fontFamily.body,
  lineHeight: theme.vars.lineHeight.md,
  padding: "var(--ModalDialog-padding)",
  minWidth: "min(calc(100vw - 2 * var(--ModalDialog-padding)), var(--ModalDialog-minWidth, 300px))",
  outline: 0,
  position: "absolute",
  display: "flex",
  flexDirection: "column"
}, ownerState.layout === "fullscreen" && {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  border: 0,
  borderRadius: 0
}, ownerState.layout === "center" && {
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  maxWidth: "min(calc(100vw - 2 * var(--ModalDialog-padding)), var(--ModalDialog-maxWidth, 100vw))",
  maxHeight: "calc(100% - 2 * var(--ModalDialog-padding))"
}, {
  [`& [id="${ownerState["aria-labelledby"]}"]`]: {
    "--Typography-margin": "calc(-1 * var(--ModalDialog-titleOffset)) 0 var(--ModalDialog-gap) 0",
    "--Typography-fontSize": "1.125em",
    [`& + [id="${ownerState["aria-describedby"]}"]`]: {
      "--unstable_ModalDialog-descriptionOffset": "calc(-1 * var(--ModalDialog-descriptionOffset))"
    }
  },
  [`& [id="${ownerState["aria-describedby"]}"]`]: {
    "--Typography-fontSize": "1em",
    "--Typography-margin": "var(--unstable_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 0 0",
    "&:not(:last-child)": {
      // create spacing between description and the next element.
      "--Typography-margin": "var(--unstable_ModalDialog-descriptionOffset, var(--ModalDialog-gap)) 0 var(--ModalDialog-gap) 0"
    }
  }
}));
var ModalDialog = React4.forwardRef(function ModalDialog2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "JoyModalDialog"
  });
  const {
    className,
    children,
    color: colorProp = "neutral",
    component = "div",
    variant = "outlined",
    size = "md",
    layout = "center",
    slots = {},
    slotProps = {}
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    color,
    component,
    layout,
    size,
    variant
  });
  const classes = useUtilityClasses2(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component,
    slots,
    slotProps
  });
  const contextValue = React4.useMemo(() => ({
    variant,
    color: color === "context" ? void 0 : color
  }), [color, variant]);
  const [SlotRoot, rootProps] = useSlot("root", {
    ref,
    className: clsx_default(classes.root, className),
    elementType: ModalDialogRoot,
    externalForwardedProps,
    ownerState,
    additionalProps: {
      as: component,
      role: "dialog",
      "aria-modal": "true"
    }
  });
  return (0, import_jsx_runtime2.jsx)(ModalDialogSizeContext_default.Provider, {
    value: size,
    children: (0, import_jsx_runtime2.jsx)(ModalDialogVariantColorContext_default.Provider, {
      value: contextValue,
      children: (0, import_jsx_runtime2.jsx)(SlotRoot, _extends({}, rootProps, {
        children: React4.Children.map(children, (child) => {
          if (!React4.isValidElement(child)) {
            return child;
          }
          if (isMuiElement(child, ["Divider"])) {
            const extraProps = {};
            extraProps.inset = "inset" in child.props ? child.props.inset : "context";
            return React4.cloneElement(child, extraProps);
          }
          return child;
        })
      }))
    })
  });
});
true ? ModalDialog.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: import_prop_types2.default.node,
  /**
   * @ignore
   */
  className: import_prop_types2.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["danger", "neutral", "primary", "success", "warning"]), import_prop_types2.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: import_prop_types2.default.elementType,
  /**
   * The layout of the dialog
   * @default 'center'
   */
  layout: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["center", "fullscreen"]), import_prop_types2.default.string]),
  /**
   * The size of the component.
   * @default 'md'
   */
  size: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["sm", "md", "lg"]), import_prop_types2.default.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: import_prop_types2.default.shape({
    root: import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: import_prop_types2.default.shape({
    root: import_prop_types2.default.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: import_prop_types2.default.oneOfType([import_prop_types2.default.arrayOf(import_prop_types2.default.oneOfType([import_prop_types2.default.func, import_prop_types2.default.object, import_prop_types2.default.bool])), import_prop_types2.default.func, import_prop_types2.default.object]),
  /**
   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.
   * @default 'outlined'
   */
  variant: import_prop_types2.default.oneOfType([import_prop_types2.default.oneOf(["outlined", "plain", "soft", "solid"]), import_prop_types2.default.string])
} : void 0;
var ModalDialog_default = ModalDialog;
export {
  ModalDialog_default as default,
  getModalDialogUtilityClass,
  modalDialogClasses_default as modalDialogClasses
};
//# sourceMappingURL=@mui_joy_ModalDialog.js.map
