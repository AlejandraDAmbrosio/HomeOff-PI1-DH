import {
  addWeeks
} from "./chunk-A6FVLBWM.js";
import {
  _typeof,
  addDays,
  addMonths,
  addYears,
  init_addDays,
  init_addMonths,
  init_addYears,
  init_requiredArgs,
  init_setMonth,
  init_startOfWeek,
  init_toDate,
  init_toInteger,
  init_typeof,
  requiredArgs,
  setMonth,
  startOfWeek,
  toDate,
  toInteger
} from "./chunk-MQZOCFIN.js";

// ../../../../../../../../node_modules/date-fns/esm/startOfISOWeek/index.js
init_startOfWeek();
init_requiredArgs();
function startOfISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  return startOfWeek(dirtyDate, {
    weekStartsOn: 1
  });
}

// ../../../../../../../../node_modules/date-fns/esm/getISOWeekYear/index.js
init_toDate();
init_requiredArgs();
function getISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  var startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  var startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// ../../../../../../../../node_modules/date-fns/esm/startOfISOWeekYear/index.js
init_requiredArgs();
function startOfISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  var date = startOfISOWeek(fourthOfJanuary);
  return date;
}

// ../../../../../../../../node_modules/date-fns/esm/addQuarters/index.js
init_toInteger();
init_addMonths();
init_requiredArgs();
function addQuarters(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  var months = amount * 3;
  return addMonths(dirtyDate, months);
}

// ../../../../../../../../node_modules/date-fns/esm/getQuarter/index.js
init_toDate();
init_requiredArgs();
function getQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var quarter = Math.floor(date.getMonth() / 3) + 1;
  return quarter;
}

// ../../../../../../../../node_modules/date-fns/esm/startOfQuarter/index.js
init_toDate();
init_requiredArgs();
function startOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3;
  date.setMonth(month, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}

// ../../../../../../../../node_modules/date-fns/esm/getDay/index.js
init_toDate();
init_requiredArgs();
function getDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var day = date.getDay();
  return day;
}

// ../../../../../../../../node_modules/date-fns/esm/getISOWeek/index.js
init_toDate();
init_requiredArgs();
var MILLISECONDS_IN_WEEK = 6048e5;
function getISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfISOWeek(date).getTime() - startOfISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// ../../../../../../../../node_modules/date-fns/esm/getTime/index.js
init_toDate();
init_requiredArgs();
function getTime(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  return timestamp;
}

// ../../../../../../../../node_modules/date-fns/esm/isSameQuarter/index.js
init_requiredArgs();
function isSameQuarter(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfQuarter = startOfQuarter(dirtyDateLeft);
  var dateRightStartOfQuarter = startOfQuarter(dirtyDateRight);
  return dateLeftStartOfQuarter.getTime() === dateRightStartOfQuarter.getTime();
}

// ../../../../../../../../node_modules/date-fns/esm/subDays/index.js
init_addDays();
init_requiredArgs();
init_toInteger();
function subDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, -amount);
}

// ../../../../../../../../node_modules/date-fns/esm/set/index.js
init_typeof();
init_toDate();
init_setMonth();
init_toInteger();
init_requiredArgs();
function set(dirtyDate, values) {
  requiredArgs(2, arguments);
  if (_typeof(values) !== "object" || values === null) {
    throw new RangeError("values parameter must be an object");
  }
  var date = toDate(dirtyDate);
  if (isNaN(date.getTime())) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (values.year != null) {
    date.setFullYear(values.year);
  }
  if (values.month != null) {
    date = setMonth(date, values.month);
  }
  if (values.date != null) {
    date.setDate(toInteger(values.date));
  }
  if (values.hours != null) {
    date.setHours(toInteger(values.hours));
  }
  if (values.minutes != null) {
    date.setMinutes(toInteger(values.minutes));
  }
  if (values.seconds != null) {
    date.setSeconds(toInteger(values.seconds));
  }
  if (values.milliseconds != null) {
    date.setMilliseconds(toInteger(values.milliseconds));
  }
  return date;
}

// ../../../../../../../../node_modules/date-fns/esm/setQuarter/index.js
init_toInteger();
init_toDate();
init_setMonth();
init_requiredArgs();
function setQuarter(dirtyDate, dirtyQuarter) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var quarter = toInteger(dirtyQuarter);
  var oldQuarter = Math.floor(date.getMonth() / 3) + 1;
  var diff = quarter - oldQuarter;
  return setMonth(date, date.getMonth() + diff * 3);
}

// ../../../../../../../../node_modules/date-fns/esm/subQuarters/index.js
init_toInteger();
init_requiredArgs();
function subQuarters(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addQuarters(dirtyDate, -amount);
}

// ../../../../../../../../node_modules/date-fns/esm/subWeeks/index.js
init_toInteger();
init_requiredArgs();
function subWeeks(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addWeeks(dirtyDate, -amount);
}

// ../../../../../../../../node_modules/date-fns/esm/subYears/index.js
init_toInteger();
init_addYears();
init_requiredArgs();
function subYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addYears(dirtyDate, -amount);
}

export {
  startOfISOWeek,
  getISOWeekYear,
  startOfISOWeekYear,
  addQuarters,
  getQuarter,
  startOfQuarter,
  getDay,
  getISOWeek,
  getTime,
  isSameQuarter,
  subDays,
  set,
  setQuarter,
  subQuarters,
  subWeeks,
  subYears
};
//# sourceMappingURL=chunk-3AKLODHB.js.map
